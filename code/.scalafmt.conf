## Preset which does the following alignments.
#
#  val x  = 2 // true for assignment
#  val xx = 22
#
#  case object B  extends A // false for `extends`
#  case object BB extends A
#
#  q  -> 22 // true for various infix operators
#  qq -> 3  // and also comments!
#
#  for {
#    x  <- List(1) // true for alignment enumerator
#    yy <- List(2)
#  } yield x ** xx
#
#  x match { // true for multiple tokens across multiple lines
#    case 1  => 1  -> 2  // first
#    case 11 => 11 -> 22 // second
#
#    // A blank line separates alignment blocks.
#    case `ignoreMe` => 111 -> 222
#  }
#
#  // Align assignments of similar type.
#  def name   = column[String]("name")
#  def status = column[Int]("status")
#  val x      = 1
#  val xx     = 22
#
#  // Align sbt module IDs.
#  libraryDependencies ++= Seq(
#    "org.scala-lang" % "scala-compiler" % scalaVersion.value,
#    "com.lihaoyi"    %% "sourcecode"    % "0.1.1"
#  )
#
align = more

## Since we don't tend to have super long literal lists, I think this is better for us as it's more
## readable.
#
#  // binPack.literalArgumentLists = true
#  val secret: List[Bit] = List(0, 1, 2)
#
#  // binPack.literalArgumentLists = false
#  val secret: List[Bit] = List(
#    0,
#    1,
#    2
#  )
#
binPack.literalArgumentLists = false

## 4 is default, we're doing 2.
#
#  def function(
#      argument1: Type1): ReturnType
#
continuationIndent.defnSite = 2

## Increases the column size to 100 vs 80 since all modern screens are widescreen.
maxColumn = 100

## The lack of newlines makes code harder to read. So this would add a newline after every top-level
## statement like import, package, def etc.
#
#  import org.scalafmt
#
#  package P {
#
#    object O {
#      val x1 = 1
#      val x2 = 2
#
#      def A = "A"
#
#      def B = "B"
#    }
#  }
#
newlines.alwaysBeforeTopLevelStatements = true

## Setting this to true will add a newline before a colon at the end of the function sometimes
## depending on the length of the line. Turning it off to make the code look more homogenous.
newlines.sometimesBeforeColonInMethodReturnType = false

## If our code has a single method-call (what they're calling single-select), it would add newlines
## for each argument. I don't think we want that.
#
#  // newlines.penalizeSingleSelectMultiArgList = true
#  logger.elem(a,
#              b,
#              c)
#
#  // newlines.penalizeSingleSelectMultiArgList = false
#  logger
#    .elem(a, b, c)
#
newlines.penalizeSingleSelectMultiArgList = false

#  // newlines.alwaysBeforeElseAfterCurlyIf = true
#  if(someCond) {
#  }
#  else {
#  }
#
#  // newlines.alwaysBeforeElseAfterCurlyIf = false
#  if(someCond) {
#  } else {
#  }
#
newlines.alwaysBeforeElseAfterCurlyIf = false

## AvoidInfix: Removes all infix notations we might have in the code.
#
#  // Without 'AvoidInfix'
#  a success b
#
#  // With 'AvoidInfix'
#  a.success(b)
#
## PreferCurlyFors: Nests for loops with curly braces and newlines.
#
## SortImports: The imports are sorted by the groups: symbols, lower-case, upper-case.
#
rewrite.rules = [AvoidInfix, PreferCurlyFors, SortImports]

## Align this to our column limit.
runner.optimizer.forceConfigStyleOnOffset = 100
